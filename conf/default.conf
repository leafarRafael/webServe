
server {
	# 5.1 definindo host e porta [Obrigatório] Obs: Caso a porta não seja
	# específicada será definida um valor default para porta (80). Caso o host
	# não seja definido se seja definido somente a porta, o servidor responderá
	# todas as solicitações recebidas naquela porta.
	#   5.1.1 Algoritmo para o servidor determinar para qual server enviar a solicitação
	# 	5.1.1.1 Traduzir todas as diretivas listen incompletas substituindo
	#	os valores que estão faltando pelos seus valores padrão para que cada bloco
	#	possa ser avaliado por seu endereço IP e porta. Exemplos:
	#	~ Um bloco sem a diretiva listen usa o valor 0.0.0.0:80
	#	~ Um bloco definido para um endereço 111.111.111.111 sem porta se tornará
	#	111.111.111.111:80
	#	~ Um bloco definido para porta 8888 sem endereço se torna 0.0.0.0:8888
	#	5.1.1.2 Em seguida tenta coletar uma lista de blocos de servidor que
	#	correspondem à solicitação, com base no IP e porta.
	#	5.1.1.3 Se houver apenas uma correspondência mais específica, o bloco de
	#	será usado para atender a solicitação. Se houver blocos com o mesmo nível
	#	de específidade o servidor começará a avaliar a diretiva server_name de 
	#	cada bloco.
	#	(5.3)
	#	Avaliará apenas a diretiva server_name quando precisar distinguir
	#	entre blocos de servidor que correspondem ao mesmo nível de especificidade
	#	na diretiva listen. Por exemplo, se o example.com for hospedado
	#	na porta 80 de 192.168.1.10, uma solicitação para example.com
	#	será sempre atendida pelo primeiro bloco neste exemplo,
	#	apesar da diretiva server_name no segundo bloco.
	#
	#		server {
	#		listen 192.168.1.10;
	#
	#		. . .
	#
	#	}
	#
	#	server {
	#		listen 80;
	#		server_name example.com;
	#
	#		. . .
	#
	#	}
	#	Se temos blocos de servidores com a mesma porta e ip, o servidor consultará o server_name
	#	de cada bloco para confirmar quais sob configurações a requisição será respondida.
	#	O primeiro IP/Porta especificamente será padrão que irá processar a requisição.
	listen 0.0.0.0:8080;
	# 5.2 definindo nome do servidor [Não Obrigatório]
	server_name www.marcal.com.br;
	# 5.4 definindo o tamanho máximo do paylod que podemos receber em uma requisição
	# [Caso não informado o valor padrão será 1m], se a requisição execeder o valor configurado
	# o erro 413 (Request Entity Too Large) é retornado para o cliente. Configurando o tamanho 
	# para zero desabilita a checagem do comprimento do payload da requisição.
	# : Obs: Unidades de medida, k = kilobyte
	# m = megabyte, g = gigabyte
	client_max_body_size 500m;
	# 5.5 Definindo rotas, são usados para decidir como processar o URI de solicitação.
	# Algoritmo para determinar o melhor bloco de localização:
	#	* Verificar todas as correspondências de localização baseadas em prefixos. Comparando cada
	#	localização com o URI de solicitação completo.
	#	* Pega o prefixo de correspondência mais longo para um determinado URI de solicitação
	#	e utiliza-o para atender a solicitação.
	#
	location / {
		# 5.5.1 Lista de métodos HTTP aceitos para esta rota.
		allow_methods GET POST DELETE;
		# 5.5.2 Definindo redireção HTTP
		redirect /;
		# 5.5.3 Definir um diretório ou arquivo que um arquivo deve ser procurado
		root /cgi;
		# 5.5.4 Permitir a listagem de diretórios ou não
		autoindex on;
		# 5.5.5 Configurar um arquivo para devolver no response caso a requisição tenha sido feita
		# para um recurso que é um diretório.
		index index.html;
		# 5.5.6 Executar CGI baseado em extensões de arquivos
		# 5.5.7	CGI's devem funcionarem com métodos POST e GET
		cgi .py .sh;
		# 5.5.8 Fazer uma rota ser capaz de aceitar arquivos enviados e configurar onde eles
		# devem serem salvos.
		upload_dir www/;
	}
	# 5.6 Configurar páginas de erros padrões para serem usadas.
	error_page 404 /404.html;
	error_page 500 502 503 504 /50x.html

#location / {
		# 5.5.1 Lista de métodos HTTP aceitos para esta rota.

		# 5.5.2 Definindo redireção HTTP

		# 5.5.3 Definir um diretório ou arquivo que um arquivo deve ser procurado
#		root /data/www
		# 5.5.4 Permitir a listagem de diretórios ou não

		# 5.5.5 Configurar um arquivo para devolver no response caso a requisição tenha sido feita
		# para um recurso que é um diretório.

		# 5.5.6 Executar CGI baseado em extensões de arquivos

		# 5.5.7	Funcionar com métodos POST e GET

		# 5.5.8 Fazer uma rota ser capaz de aceitar arquivos enviados e configurar onde eles
		# devem serem salvos.

#	}
	# 5.6 Configurar páginas de erros padrões para serem usadas.
	error_page 404 /404.html;
	error_page 500 502 503 504 /50x.html;
}

# 5.3 Quaisquer configurações deste servidor será ignorado pois possui a mesma porta e host que foram
# previamente configurados
server {
	listen 0.0.0.0:8081
}

server {
	listen 0.0.0.0:8082;
	server_name www.yokogawa.com.br;
	error_page 500 502 50x/
	error_page 400 502
}